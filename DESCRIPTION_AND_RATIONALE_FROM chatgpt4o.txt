I see the issue you're encountering. The original code I provided does not correctly handle arithmetic expressions involving variables and constants, such as `B = A + 10`. It only handles direct assignments of integer constants.

To fix this, we need to enhance the code to parse and evaluate simple arithmetic expressions. Below is an updated version of the program that includes an `evaluate_expression` function capable of handling basic arithmetic operations like addition (`+`).

---

### **Updated Single-File Code**

```c
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

// Define the maximum number of lines and line length
#define MAX_LINES 100
#define MAX_LINE_LENGTH 256

// Structure to represent a program
typedef struct {
    char lines[MAX_LINES][MAX_LINE_LENGTH];
    int line_count;
} Program;

// Function to parse a Minitran program from a file
Program *parse_file(const char *filename) {
    FILE *file = fopen(filename, "r");
    if (!file) {
        perror("Error opening file");
        return NULL;
    }

    Program *program = (Program *)malloc(sizeof(Program));
    program->line_count = 0;

    char line[MAX_LINE_LENGTH];
    while (fgets(line, sizeof(line), file)) {
        // Ignore comments (lines starting with 'C') and blank lines
        if (line[0] == 'C' || line[0] == '\n') continue;
        strncpy(program->lines[program->line_count++], line, MAX_LINE_LENGTH);
    }

    fclose(file);
    return program;
}

// Function to free memory used by the program structure
void free_program(Program *program) {
    if (program) {
        free(program);
    }
}

// Function to evaluate an expression (supports addition)
int evaluate_expression(char *expr, int vars[26]) {
    int result = 0;
    char *token = strtok(expr, "+");
    while (token != NULL) {
        // Trim leading and trailing whitespace
        while (isspace(*token)) token++;
        char *end = token + strlen(token) - 1;
        while (end > token && isspace(*end)) {
            *end = '\0';
            end--;
        }
        // Check if token is a variable
        if (isalpha(*token)) {
            char var = toupper(*token);
            result += vars[var - 'A'];
        } else {
            // Assume it's a constant integer
            result += atoi(token);
        }
        token = strtok(NULL, "+");
    }
    return result;
}

// Function to execute the parsed Minitran program
void execute_program(Program *program) {
    int vars[26] = {0}; // Variable storage for A-Z

    for (int i = 0; i < program->line_count; i++) {
        char *line = program->lines[i];

        // Handle WRITE statement
        if (strncmp(line, "WRITE", 5) == 0) {
            char var = toupper(line[6]); // Assume format: WRITE A
            printf("%d\n", vars[var - 'A']);
        }
        // Handle variable assignment (e.g., A = 5 or B = A + 10)
        else if (strchr(line, '=')) {
            char var = toupper(line[0]); // Assume variable name is a single character
            char expr[MAX_LINE_LENGTH];
            strcpy(expr, line + 4); // Copy expression after '='

            // Remove newline character if present
            char *newline = strchr(expr, '\n');
            if (newline) *newline = '\0';

            int value = evaluate_expression(expr, vars);
            vars[var - 'A'] = value;
        }
        // Handle END statement
        else if (strncmp(line, "END", 3) == 0) {
            break;
        }
    }
}

// Main function
int main(int argc, char *argv[]) {
    if (argc != 2) {
        printf("Usage: %s <program.mt>\n", argv[0]);
        return 1;
    }

    const char *filename = argv[1];
    Program *program = parse_file(filename);

    if (!program) {
        fprintf(stderr, "Error: Failed to parse file.\n");
        return 1;
    }

    // printf("Running program...\n");
    execute_program(program);
    free_program(program);

    return 0;
}
```

---

### **Explanation of Changes**

- **Expression Evaluation**: Added an `evaluate_expression` function that parses and evaluates expressions with addition (`+`). It supports variables (`A-Z`) and integer constants.

- **Variable Handling**: Updated variable handling to be case-insensitive using `toupper`.

- **Assignment Parsing**: Modified the assignment parsing to extract the entire expression after the `=` sign, not just a constant.

- **Whitespace Trimming**: Included trimming of leading and trailing whitespace to ensure accurate parsing.

### **Updated Example Input File: `program.mt`**

```fortran
PROGRAM TEST
C This is a comment
A = 5
B = A + 10
WRITE A
WRITE B
END
```

### **Compilation and Execution**

#### **1. Save the Code**

Save the updated code in a file named `minitran.c`.

#### **2. Compile the Program**

Compile the program using GCC:

```bash
gcc minitran.c -o minitran
```

#### **3. Run the Program**

Run the Minitran interpreter with the test program:

```bash
./minitran program.mt
```

### **Expected Output**

```
5
15
```

---

### **Testing Additional Features**

You can now test the interpreter with different expressions involving addition. For example:

#### **Test Program: `test2.mt`**

```fortran
PROGRAM ADDITION
C Testing multiple additions
A = 2
B = 3
C = A + B + 5
WRITE C
END
```

#### **Run the Test**

```bash
./minitran test2.mt
```

#### **Expected Output**

```
10
```

---

### **Limitations and Next Steps**

**Current Capabilities**:

- Handles integer variables (`A-Z`) and integer constants.
- Supports addition (`+`) in expressions.
- Processes `WRITE` statements for output.
- Ignores comments and blank lines.

**Limitations**:

- Only supports addition (`+`). Other operators like subtraction (`-`), multiplication (`*`), and division (`/`) are not implemented.
- Does not handle parentheses or operator precedence.
- No support for control structures like loops (`DO`) or conditionals (`IF`).
- Variables are assumed to be single uppercase letters (`A-Z`).

**Potential Enhancements**:

- **Support More Operators**: Extend `evaluate_expression` to handle `-`, `*`, `/`.
- **Operator Precedence**: Implement a more robust expression parser to handle operator precedence and parentheses.
- **Variables Names**: Allow for multi-character variable names.
- **Control Structures**: Add support for `IF` statements and `DO` loops.
- **Error Handling**: Include better error messages for invalid syntax or undefined variables.

---

### **Conclusion**

By updating the interpreter to handle arithmetic expressions, your program should now produce the correct output for statements like `B = A + 10`. Feel free to expand upon this code to add more features from the Minitran subset or Fortran 77 as needed.

Let me know if you have any questions or need further assistance!
